[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]] # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]] # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]] # toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] # カラースキーマ
repo = 'sainnhe/sonokai'
hook_add = '''
  set termguicolors
  " the configuration options should be placed before `colorscheme sonokai`
  let g:sonokai_style = 'andromeda'
  let g:sonokai_enable_italic = 1
  let g:sonokai_disable_italic_comment = 1
  colorscheme sonokai
'''

[[plugins]] # Languageサーバープロトコル
repo = 'neoclide/coc.nvim'
rev = 'release'
build = '''
  git checkout release
'''
hook_add = '''
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
  inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)
  nmap <silent> rn <Plug>(coc-rename)
  nmap <silent> <space>l :<C-u>CocList<cr>
  nmap <silent> <space>h :<C-u>call CocAction('doHover')<cr>
  nmap <silent> <space>fm <Plug>(coc-format)
'''
# 例えば絵文字のインストール :CocInstall coc-emoji
# すでにインストールしているもの
# :CocInstall coc-python
# :CocInstall coc-lists
# :CocInstall cos-json

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'easymotion/vim-easymotion'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'vim-airline/vim-airline'

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
# 先にpowerlinesフォントを入れておく必要がある
# あとターミナルの見た目は、NerdfontsをインストールしてSauce Code Pro Nerd Font Completeが良い感じ
# https://blog.htkyama.org/vim_airline

[[plugins]]
repo = 'ryanoasis/vim-devicons'
# nerd-fontをインストールして、terminalで設定する必要がある。
# ファイラーでアイコンを表示する設定

[[plugins]]
# チートシート
repo = 'reireias/vim-cheatsheet'
# let g:cheatsheet#cheat_file = '~/.config/nvim/cheatsheet.md'

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
# vimでgit操作ができるやつ
repo = 'tpope/vim-fugitive'


[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''! has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''! has('nvim')'''

[[plugins]]
repo = 'jiangmiao/auto-pairs'

# ファイル検索
[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
  nnoremap [denite] <Nop>
  nmap <C-d> [denite]
  nnoremap <silent> [denite]g :<C-u>Denite grep -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> [denite]r :<C-u>Denite -resume -buffer-name=search-buffer-denite<CR>
  nnoremap <silent> [denite]p :<C-u>Denite file_rec<CR>
  call denite#custom#option('default', 'prompt', '>')
  call denite#custom#option('_', 'highlight_matched_range', 'None')
  call denite#custom#option('_', 'highlight_matched_char', 'None')
  call denite#custom#map('insert', "<Tab>", '<denite:move_to_next_line>')
  call denite#custom#map('insert', "<S-Tab>", '<denite:move_to_previous_line>')
  call denite#custom#map('insert', "<C-t>", '<denite:do_action:tabopen>')
  call denite#custom#map('insert', "<C-v>", '<denite:do_action:vsplit>')
  call denite#custom#map('normal', "v", '<denite:do_action:vsplit>')
  call denite#custom#var('grep', 'command', ['pt', '--follow', '--nogroup', '--nocolor', '--hidden'])
  call denite#custom#var('grep', 'default_opts', [])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('file_rec', 'command', ['pt', '--follow', '--nocolor', '--nogroup', '--hidden', '-g', ''])
'''

[[plugins]]
repo = 'brooth/far.vim'

[[plugins]]
repo = 'Yggdroot/LeaderF'
# hook_add = """
# ./install.sh
# """

[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'

[[plugins]]
repo = 'othree/eregex.vim'

[[plugins]]
repo = 'airblade/vim-gitgutter'
add = '''
let g:gitgutter_highlight_lines = 1
'''

[[plugins]]
repo = 'tpope/vim-repeat'

[[plugins]]
repo = 'jacquesbh/vim-showmarks'

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'skanehira/translate.vim'
hook_add = '''
" Google翻訳のショートカット
let g:translate_source = "en"
let g:translate_target = "ja"
'''

[[plugins]]
repo = 'yuttie/comfortable-motion.vim'

[[plugins]]
repo = 'LeafCage/vimhelpgenerator'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_add = '''
nnoremap <C-n> :Fern . -reveal=% -drawer -toggle -width=40<CR>
let g:fern#renderer = "nerdfont"
function! FernInit() abort
    nmap <buffer> v <Plug>(fern-action-open:side)
    nmap <buffer> M <Plug>(fern-action-new-dir)
    nmap <buffer> ; <Plug>(fern-action-hidden:toggle)
    nmap <buffer> - <Plug>(fern-action-mark:toggle)
    vmap <buffer> - <Plug>(fern-action-mark:toggle)
    nmap <buffer> C <Plug>(fern-action-clipboard-copy)
    nmap <buffer> X <Plug>(fern-action-clipboard-move)
    nmap <buffer> P <Plug>(fern-action-clipboard-paste)
    nmap <buffer> h <Plug>(fern-action-collapse)
    nmap <buffer> c <Plug>(fern-action-copy)
    nmap <buffer> <leader>h <Plug>(fern-action-leave)
    nmap <buffer> m <Plug>(fern-action-move)
    nmap <buffer> N <Plug>(fern-action-new-file)
    nmap <buffer> <cr> <Plug>(fern-action-open-or-enter)
    nmap <buffer> l <Plug>(fern-action-open-or-expand)
    nmap <buffer> s <Plug>(fern-action-open:select)
    nmap <buffer> <CR> <Plug>(fern-action-open:tabedit)
    nmap <buffer> o <Plug>(fern-action-open:tabedit)
    nmap <buffer> <C-l> <Plug>(fern-action-reload)
    nmap <buffer> r <Plug>(fern-action-rename)
    nmap <buffer> i <Plug>(fern-action-reveal)
    nmap <buffer> D <Plug>(fern-action-trash)
    nmap <buffer> y <Plug>(fern-action-yank)
    nmap <buffer> gr <Plug>(fern-action-grep)
    nmap <buffer> d <Plug>(fern-action-remove)
    nmap <buffer> B <Plug>(fern-action-save-as-bookmark)
    nmap <buffer> cd <Plug>(fern-action-tcd)
    nmap <buffer> <C-h> <C-w>h
    nmap <buffer> <C-l> <C-w>l
endfunction
augroup FernEvents
  autocmd!
  autocmd FileType fern call FernInit()
  autocmd VimEnter * ++nested Fern . -drawer -stay -toggle -reveal=% -width=40
augroup END
let g:fern#disable_default_mappings = 1
'''

[[plugins]]
repo = 'lambdalisue/fern-git-status.vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'

[[plugins]]
repo = 'thinca/vim-qfreplace'
hook_add = '''
nnoremap qf :Qfreplace<CR>
'''

[[plugins]]
repo = 'junegunn/fzf'
build = '''
./install --all
'''
merged = 0

[[plugins]]
repo = 'yuki-yano/fzf-preview.vim'
rev = 'release'
hook_add = '''
let g:fzf_preview_directory_files_command = 'rg --files --no-ignore --hidden -g "!.git/"'
let g:fzf_preview_filelist_command = 'rg --files --no-ignore --hidden --follow --no-messages --glob "!.git/*" --glob \!"* *"'
let g:fzf_preview_custom_processes = {
        \ 'open-file': {
        \   'ctrl-o': 'FzfPreviewOpenFileCtrlO',
        \   'ctrl-q': 'FzfPreviewOpenFileCtrlQ',
        \   'ctrl-t': 'FzfPreviewOpenFileCtrlT',
        \   'ctrl-v': 'FzfPreviewOpenFileCtrlV',
        \   'ctrl-x': 'FzfPreviewOpenFileCtrlX',
        \   'enter': 'FzfPreviewOpenFileCtrlT'
      \   }
      \ }
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'

[[plugins]]
repo = 'APZelos/blamer.nvim'
hook_add = '''
let g:blamer_enabled = 1
let g:blamer_delay = 500
'''

[[plugins]]
repo = 'bun913/min-todo.vim'
hook_add = '''
" TODO系タスクはmdファイルでのみ読み込み
nnoremap <C-c> :ToggleTask<CR>
imap <C-c> <ESC>:CreateTask<CR>A
nnoremap <Leader>t :tabe ~/todo.md<CR>
command! AR call mintodo#ArchiveTasks()
'''

[[plugins]]
repo = 'heavenshell/vim-pydocstring'
build = 'make install'
hook_add = '''
nmap <silent> <C-_> <Plug>(pydocstring)
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
# deno のインストールが必要

[[plugins]]
repo = 'skanehira/denops-docker.vim'
hook_add = '''
command! DI :DockerImages
command! DC :DockerContainers
'''

[[plugins]]
repo = 'aklt/plantuml-syntax'
hook_add = '''
au FileType plantuml command! OpenUml :!open -a /Applications/Google\ Chrome.app --args --disable-web-security --user-data-dir="dummy" file://%
'''

