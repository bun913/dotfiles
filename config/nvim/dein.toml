###
# LSP
###

# LSP settings
[[plugins]]
hook_add = '''
command LSP LspManageServers
" Leader fmでフォーマット
nnoremap <Leader>fm <cmd>LspDocumentFormat<cr>
" 保存時自動フォーマット
autocmd BufWritePre <buffer> LspDocumentFormatSync
" 補完表示時のEnterで改行をしない
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"
set completeopt=menuone,noinsert
inoremap <expr><C-n> pumvisible() ? "<Down>" : "<C-n>"
inoremap <expr><C-p> pumvisible() ? "<Up>" : "<C-p>"
'''
repo = 'mattn/vim-lsp-settings'

###
# Syntax / Higlight
###

# treesitter
## ハイライト・インデント等の設定
[[plugins]]
hook_add = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    disable = {
      'lua',
      'c_sharp'
    },
    ensure_installed = {
      "python",
      "go",
      "js",
      "ts",
      "json",
      "toml",
      "yml",
      "hcl"
    },
    indent = {
      enable  = true
    },
    autotag = {
      enable = true
    }
  }
}
EOF
'''
repo = 'nvim-treesitter/nvim-treesitter'

###
# Theme
###


[[plugins]] # カラースキーマ
hook_add = '''
  set termguicolors
  " the configuration options should be placed before `colorscheme sonokai`
  if has('termguicolors')
    set termguicolors
  endif

  " The configuration options should be placed before `colorscheme sonokai`.
  let g:sonokai_style = 'andromeda'
  let g:sonokai_enable_italic = 1
  let g:sonokai_disable_italic_comment = 1
  let g:sonokai_transparent_background = 1
  colorscheme sonokai
'''
repo = 'sainnhe/sonokai'

###
# Editor Utlity
###


[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
hook_add = '''
  " exit してもウィンドウが残ると閉じないといけないので
  let g:floaterm_autoclose = 1

  nnoremap <expr> <M-t> floaterm#buflist#first() == -1 ? '<Cmd>FloatermNew<CR>' : '<Cmd>FloatermToggle<CR>'
  nnoremap <Leader>t :FloatermNew! test<CR>
  command! T :FloatermToggle -autoclose=1<CR>
'''
on_cmd = 'FloatermNew'
on_func = 'floaterm#'
repo = 'voldikss/vim-floaterm'


[[plugins]]
hook_add = '''
nnoremap <C-t> :Template 
inoremap <C-t> <Esc>:Template 
let g:sonictemplate_vim_template_dir = [
      \ '~/dotfiles/config/nvim/vim-sonic-template'
      \]
'''
repo = 'mattn/vim-sonictemplate'

###
# Git
###

[[plugins]]
repo = 'sindrets/diffview.nvim'

[[plugins]]
hook_add = '''
nnoremap <leader>r :QuickRun<CR>
'''
repo = 'thinca/vim-quickrun'

# 差分を表示
[[plugins]]
hook_add = '''
nmap ghp <Plug>(GitGutterPreviewHunk)
nmap ghs <Plug>(GitGutterStageHunk)
nmap ghu <Plug>(GitGutterUndoHunk)
'''
repo = 'airblade/vim-gitgutter'

# Gdiffで差分が超便利
# commitIDを後ろ煮付けるとその差分がわかる
# gsの画面でdvで差分を見ながら編集なども可能
[[plugins]]
hook_add = '''
nnoremap gs :Gstatus<cr>
nnoremap gb :Git blame<cr>
nnoremap gd :Gdiff<cr>
nnoremap gh :DiffviewFileHistory<cr>
'''
repo = "tpope/vim-fugitive"

# Githubで当該ページを開ける超便利
[[plugins]]
hook_add = '''
vnoremap gb :GBrowse<CR>
'''
repo = "tpope/vim-rhubarb"

# コンフリクトをわかりやすく表示
[[plugins]]
hook_add = '''
lua << EOF
require('git-conflict').setup()
EOF
'''
repo = 'akinsho/git-conflict.nvim'

# githubcli
[[plugins]]
hook_add = '''
lua << EOF
require"octo".setup({
  mappings = {
    submit_win = {
      approve_review = { lhs = "<Leader>gra", desc = "approve review" },
      comment_review = { lhs = "<Leader>grm", desc = "comment review" },
      request_changes = { lhs = "<Leader>grc", desc = "request changes review" },
    },
  }
})
EOF
" pr shortcuts
nnoremap <Leader>gprl :Octo pr list<CR>
nnoremap <Leader>gprc  :Octo pr create<CR>
nnoremap <Leader>gpre  :Octo pr edit 
nnoremap <Leader>gprs  :Octo pr search<CR>
" issue shortcuts
nnoremap <Leader>gil :Octo issue list<CR>
nnoremap <Leader>gic :Octo issue create<CR>
nnoremap <Leader>gie :Octo issue edit 
nnoremap <Leader>gis :Octo issue search<CR>
" review
nnoremap <Leader>grs :Octo review start 
nnoremap <Leader>gre :Octo review submit<CR>
'''
repo = 'pwntester/octo.nvim'

###
# Mark
###
[[plugins]]
hook_add = '''
lua << EOF
require'marks'.setup {
  default_mappings = true,
}
EOF
'''
repo = 'chentoast/marks.nvim'

###
# Filer
###
[[plugins]]
hook_add = '''
lua << EOF
local actions = require('telescope.actions')
local fb_actions = require "telescope".extensions.file_browser.actions

require("telescope").setup {
  extensions = {
    file_browser = {
      theme = "ivy",
      -- disables netrw and use telescope-file-browser in its place
      hijack_netrw = true,
      mappings = {
        ["i"] = {
          -- your custom insert mode mappings
        },
        ["n"] = {
          ["q"] = actions.close,
          -- your custom normal mode mappings
        },
      },
    },
  },
}

vim.api.nvim_set_keymap(
  "n",
  "<space>n",
  ":Telescope file_browser<CR>",
  { noremap = true }
)

-- To get telescope-file-browser loaded and working with telescope,
-- you need to call load_extension, somewhere after setup function:
require("telescope").load_extension "file_browser"
EOF
'''
repo = 'nvim-telescope/telescope-file-browser.nvim'

###
# Util
###

[[plugins]]
hook_add = '''
command MT MakeTable
'''
repo = 'mattn/vim-maketable'

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'tpope/vim-repeat'
