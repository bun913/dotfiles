[[plugins]]
repo = 'Shougo/dein.vim'

###
# LSP
###

# LSP (Language Server Protocol)
[[plugins]]
repo = 'prabirshrestha/vim-lsp'

# LSP settings
[[plugins]]
hook_add = '''
command LSP LspManageServers
" Leader fmでフォーマット
nnoremap <Leader>fm <cmd>LspDocumentFormat<cr>
" 保存時自動フォーマット
autocmd BufWritePre <buffer> LspDocumentFormatSync
" 補完表示時のEnterで改行をしない
inoremap <expr><CR>  pumvisible() ? "<C-y>" : "<CR>"
set completeopt=menuone,noinsert
inoremap <expr><C-n> pumvisible() ? "<Down>" : "<C-n>"
inoremap <expr><C-p> pumvisible() ? "<Up>" : "<C-p>"
'''
repo = 'mattn/vim-lsp-settings'

# Auto completion for LSP
[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'

# Auto completion for LSP
[[plugins]]
repo = 'prabirshrestha/asyncomplete-lsp.vim'

###
# Syntax / Higlight
###

# treesitter
## ハイライト・インデント等の設定
[[plugins]]
hook_add = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    disable = {
      'lua',
      'c_sharp'
    },
    ensure_installed = {
      "python",
      "go",
      "js",
      "ts",
      "json",
      "toml",
      "yml",
      "hcl"
    },
    indent = {
      enable  = true
    },
    autotag = {
      enable = true
    }
  }
}
EOF
'''
repo = 'nvim-treesitter/nvim-treesitter'

###
# Theme
###


[[plugins]] # カラースキーマ
hook_add = '''
  set termguicolors
  " the configuration options should be placed before `colorscheme sonokai`
  if has('termguicolors')
    set termguicolors
  endif

  " The configuration options should be placed before `colorscheme sonokai`.
  let g:sonokai_style = 'andromeda'
  let g:sonokai_enable_italic = 1
  let g:sonokai_disable_italic_comment = 1
  let g:sonokai_transparent_background = 1
  colorscheme sonokai
'''
repo = 'sainnhe/sonokai'

[[plugins]]
hook_add = '''
lua << END
require('lualine').setup()
END
'''
repo = 'nvim-lualine/lualine.nvim'

[[plugins]]
hook_add = '''
lua << EOF
require("bufferline").setup{}
EOF
'''
repo = 'akinsho/bufferline.nvim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
# nerd-fontをインストールして、terminalで設定する必要がある。
# ファイラーでアイコンを表示する設定

###
# fuzzy-finder
###


# telescope.nvimが依存
[[plugins]]
repo = 'nvim-lua/plenary.nvim'

# fzf-previewのようにプレビューを導入
# brew install luajit
# brew install rg
# brew install fd
[[plugins]]
depends = ['airblade/vim-rooter']
hook_add = '''
" Search for Project root
" Find files using Telescope command-line sugar.
nnoremap <C-p> <cmd>Telescope find_files<cr>
nnoremap <C-g> <cmd>Telescope live_grep<cr>
" プロジェクトルートではなく現在開いているファイルを起点にファイル検索
nnoremap <M-p> <cmd>lua require('telescope.builtin').find_files( { cwd = vim.fn.expand('%:p:h') })<cr>
nnoremap <M-g> <cmd>lua require('telescope.builtin').live_grep( { cwd = vim.fn.expand('%:p:h') })<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
lua <<EOF
require('telescope').setup{
  defaults = {
    mappings = {
      n = {
        ["<esc>"] = require('telescope.actions').close,
      },
      i = {
        ["<esc>"] = require('telescope.actions').close,
        ["<C-a>"] = require('telescope.actions').send_to_qflist + require('telescope.actions').open_qflist,
        ["<C-q>"] = require('telescope.actions').send_selected_to_qflist + require('telescope.actions').open_qflist
      }
    }
  }
}
EOF
'''
repo = 'nvim-telescope/telescope.nvim'

# telescope-frequencyが依存
[[plugins]]
repo = 'tami5/sqlite.lua'

# telescope-frequencyが依存
[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
hook_add = '''
nnoremap <C-f> <cmd>Telescope frecency<cr>
lua << EOF
require"telescope".load_extension("frecency")
EOF
'''
repo = 'nvim-telescope/telescope-frecency.nvim'

###
# Tmux
###


[[plugins]]
repo = 'christoomey/vim-tmux-navigator'

###
# Editor Utlity
###


[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
hook_add = '''
" TODO系タスクはmdファイルでのみ読み込み
nnoremap <C-c> :ToggleTask<CR>
imap <C-c> <ESC>:CreateTask<CR>A
command! TODO :new ~/todo.md
command! AR call mintodo#ArchiveTasks()
'''
repo = 'bun913/min-todo.vim'

[[plugins]]
hook_add = '''
  " exit してもウィンドウが残ると閉じないといけないので
  let g:floaterm_autoclose = 1

  nnoremap <expr> <M-t> floaterm#buflist#first() == -1 ? '<Cmd>FloatermNew<CR>' : '<Cmd>FloatermToggle<CR>'
  nnoremap <Leader>t :FloatermNew! test<CR>
  command! T :FloatermToggle -autoclose=1<CR>
'''
on_cmd = 'FloatermNew'
on_func = 'floaterm#'
repo = 'voldikss/vim-floaterm'


[[plugins]]
hook_add = '''
nnoremap <C-t> :Template 
inoremap <C-t> <Esc>:Template 
'''
repo = 'mattn/vim-sonictemplate'

###
# Git
###

[[plugins]]
repo = 'sindrets/diffview.nvim'

[[plugins]]
hook_add = '''
nnoremap <leader>r :QuickRun<CR>
'''
repo = 'thinca/vim-quickrun'

# 差分を表示
[[plugins]]
hook_add = '''
nmap ghp <Plug>(GitGutterPreviewHunk)
nmap ghs <Plug>(GitGutterStageHunk)
nmap ghu <Plug>(GitGutterUndoHunk)
'''
repo = 'airblade/vim-gitgutter'

# Gdiffで差分が超便利
# commitIDを後ろ煮付けるとその差分がわかる
# gsの画面でdvで差分を見ながら編集なども可能
[[plugins]]
hook_add = '''
nnoremap gs :Gstatus<cr>
nnoremap gb :Git blame<cr>
nnoremap gd :Gdiff<cr>
nnoremap gh :DiffviewFileHistory<cr>
'''
repo = "tpope/vim-fugitive"

# Githubで当該ページを開ける超便利
[[plugins]]
hook_add = '''
vnoremap gb :GBrowse<CR>
'''
repo = "tpope/vim-rhubarb"

# コンフリクトをわかりやすく表示
[[plugins]]
hook_add = '''
lua << EOF
require('git-conflict').setup()
EOF
'''
repo = 'akinsho/git-conflict.nvim'

# githubcli
[[plugins]]
hook_add = '''
lua << EOF
require"octo".setup({
  mappings = {
    submit_win = {
      approve_review = { lhs = "<Leader>gra", desc = "approve review" },
      comment_review = { lhs = "<Leader>grm", desc = "comment review" },
      request_changes = { lhs = "<Leader>grc", desc = "request changes review" },
    },
  }
})
EOF
" pr shortcuts
nnoremap <Leader>gprl :Octo pr list<CR>
nnoremap <Leader>gprc  :Octo pr create<CR>
nnoremap <Leader>gpre  :Octo pr edit 
nnoremap <Leader>gprs  :Octo pr search<CR>
" issue shortcuts
nnoremap <Leader>gil :Octo issue list<CR>
nnoremap <Leader>gic :Octo issue create<CR>
nnoremap <Leader>gie :Octo issue edit 
nnoremap <Leader>gis :Octo issue search<CR>
" review
nnoremap <Leader>grs :Octo review start 
nnoremap <Leader>gre :Octo review submit<CR>
'''
repo = 'pwntester/octo.nvim'

###
# Mark
###
[[plugins]]
hook_add = '''
lua << EOF
require'marks'.setup {
  default_mappings = true,
}
EOF
'''
repo = 'chentoast/marks.nvim'

###
# Filer
###

[[plugins]]
repo = 'Shougo/defx.nvim'

[[plugins]]
repo = 'kristijanhusak/defx-icons'

[[plugins]]
repo = 'kristijanhusak/defx-git'
